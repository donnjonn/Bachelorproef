
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000031e  00000392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dfd  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076c  00000000  00000000  00001251  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d8  00000000  00000000  000019bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000497  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000656  00000000  00000000  0000242f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002a85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 25 01 	call	0x24a	; 0x24a <main>
  8e:	0c 94 8d 01 	jmp	0x31a	; 0x31a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
  96:	5f 98       	cbi	0x0b, 7	; 11
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
  98:	88 23       	and	r24, r24
  9a:	0c f4       	brge	.+2      	; 0x9e <lcd_write_4+0x8>
  9c:	5f 9a       	sbi	0x0b, 7	; 11

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
  9e:	5e 98       	cbi	0x0b, 6	; 11
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
  a0:	86 fd       	sbrc	r24, 6
  a2:	5e 9a       	sbi	0x0b, 6	; 11

    lcd_D5_port &= ~(1<<lcd_D5_bit);
  a4:	5d 98       	cbi	0x0b, 5	; 11
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
  a6:	85 fd       	sbrc	r24, 5
  a8:	5d 9a       	sbi	0x0b, 5	; 11

    lcd_D4_port &= ~(1<<lcd_D4_bit);
  aa:	5c 98       	cbi	0x0b, 4	; 11
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
  ac:	84 fd       	sbrc	r24, 4
  ae:	5c 9a       	sbi	0x0b, 4	; 11

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
  b0:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	85 e0       	ldi	r24, 0x05	; 5
  b4:	8a 95       	dec	r24
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_write_4+0x1e>
  b8:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
  ba:	29 98       	cbi	0x05, 1	; 5
  bc:	85 e0       	ldi	r24, 0x05	; 5
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_write_4+0x28>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
  ca:	28 9a       	sbi	0x05, 0	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
  cc:	29 98       	cbi	0x05, 1	; 5
    lcd_write_4(theData);                           // write the upper 4-bits of the data
  ce:	c8 2f       	mov	r28, r24
  d0:	d0 e0       	ldi	r29, 0x00	; 0
  d2:	ce 01       	movw	r24, r28
  d4:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
  d8:	ce 01       	movw	r24, r28
  da:	82 95       	swap	r24
  dc:	92 95       	swap	r25
  de:	90 7f       	andi	r25, 0xF0	; 240
  e0:	98 27       	eor	r25, r24
  e2:	80 7f       	andi	r24, 0xF0	; 240
  e4:	98 27       	eor	r25, r24
  e6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_4>
}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	00 d0       	rcall	.+0      	; 0xfa <lcd_write_string_4d+0xa>
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
 100:	1a 82       	std	Y+2, r1	; 0x02
 102:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
 104:	e9 81       	ldd	r30, Y+1	; 0x01
 106:	fa 81       	ldd	r31, Y+2	; 0x02
 108:	e8 0f       	add	r30, r24
 10a:	f9 1f       	adc	r31, r25
 10c:	80 81       	ld	r24, Z
 10e:	88 23       	and	r24, r24
 110:	d1 f0       	breq	.+52     	; 0x146 <lcd_write_string_4d+0x56>
    {
        lcd_write_character_4d(theString[i]);
 112:	e9 81       	ldd	r30, Y+1	; 0x01
 114:	fa 81       	ldd	r31, Y+2	; 0x02
 116:	e0 0f       	add	r30, r16
 118:	f1 1f       	adc	r31, r17
 11a:	80 81       	ld	r24, Z
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_write_character_4d>
        i++;
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	9a 81       	ldd	r25, Y+2	; 0x02
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	9a 83       	std	Y+2, r25	; 0x02
 12a:	89 83       	std	Y+1, r24	; 0x01
 12c:	8f e3       	ldi	r24, 0x3F	; 63
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_write_string_4d+0x40>
 134:	00 c0       	rjmp	.+0      	; 0x136 <lcd_write_string_4d+0x46>
 136:	00 00       	nop
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
 138:	e9 81       	ldd	r30, Y+1	; 0x01
 13a:	fa 81       	ldd	r31, Y+2	; 0x02
 13c:	e0 0f       	add	r30, r16
 13e:	f1 1f       	adc	r31, r17
 140:	80 81       	ld	r24, Z
 142:	81 11       	cpse	r24, r1
 144:	e6 cf       	rjmp	.-52     	; 0x112 <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	08 95       	ret

00000154 <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
 158:	28 98       	cbi	0x05, 0	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 15a:	29 98       	cbi	0x05, 1	; 5
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
 15c:	c8 2f       	mov	r28, r24
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	ce 01       	movw	r24, r28
 162:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
 166:	ce 01       	movw	r24, r28
 168:	82 95       	swap	r24
 16a:	92 95       	swap	r25
 16c:	90 7f       	andi	r25, 0xF0	; 240
 16e:	98 27       	eor	r25, r24
 170:	80 7f       	andi	r24, 0xF0	; 240
 172:	98 27       	eor	r25, r24
 174:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_4>
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	81 ee       	ldi	r24, 0xE1	; 225
 182:	94 e0       	ldi	r25, 0x04	; 4
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <lcd_init_4d+0x6>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_init_4d+0x10>
 18e:	00 00       	nop
//   this instruction can be sent on just the four available data lines and it will be interpreted 
//   properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the 
//   control lines have previously been configured properly.

// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
 190:	28 98       	cbi	0x05, 0	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 192:	29 98       	cbi	0x05, 1	; 5

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
 194:	80 e3       	ldi	r24, 0x30	; 48
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_4>
 19c:	8f e3       	ldi	r24, 0x3F	; 63
 19e:	9c e9       	ldi	r25, 0x9C	; 156
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init_4d+0x22>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_init_4d+0x28>
 1a6:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
 1a8:	80 e3       	ldi	r24, 0x30	; 48
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	8f e1       	ldi	r24, 0x1F	; 31
 1b2:	93 e0       	ldi	r25, 0x03	; 3
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcd_init_4d+0x36>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lcd_init_4d+0x3c>
 1ba:	00 00       	nop
    _delay_us(200);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
 1bc:	80 e3       	ldi	r24, 0x30	; 48
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_4>
 1c4:	8f e1       	ldi	r24, 0x1F	; 31
 1c6:	93 e0       	ldi	r25, 0x03	; 3
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_init_4d+0x4a>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_init_4d+0x50>
 1ce:	00 00       	nop
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one 
//  of the upper four bits of the instruction.
 
    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
 1d0:	88 e2       	ldi	r24, 0x28	; 40
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_4>
 1d8:	8f e3       	ldi	r24, 0x3F	; 63
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_init_4d+0x5e>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_init_4d+0x64>
 1e2:	00 00       	nop
    _delay_us(80);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
 1e4:	88 e2       	ldi	r24, 0x28	; 40
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_write_instruction_4d>
 1ec:	8f e3       	ldi	r24, 0x3F	; 63
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_init_4d+0x72>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_init_4d+0x78>
 1f6:	00 00       	nop
// The next three instructions are specified in the data sheet as part of the initialization routine, 
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them 
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
 1f8:	88 e0       	ldi	r24, 0x08	; 8
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_write_instruction_4d>
 200:	8f e3       	ldi	r24, 0x3F	; 63
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_init_4d+0x86>
 208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_init_4d+0x8c>
 20a:	00 00       	nop
    _delay_us(80);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	8f e7       	ldi	r24, 0x7F	; 127
 216:	9e e3       	ldi	r25, 0x3E	; 62
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_init_4d+0x9a>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd_init_4d+0xa0>
 21e:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	8f e3       	ldi	r24, 0x3F	; 63
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_init_4d+0xae>
 230:	00 c0       	rjmp	.+0      	; 0x232 <lcd_init_4d+0xb4>
 232:	00 00       	nop

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.
 
// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
 234:	8c e0       	ldi	r24, 0x0C	; 12
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_write_instruction_4d>
 23c:	8f e3       	ldi	r24, 0x3F	; 63
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <lcd_init_4d+0xc2>
 244:	00 c0       	rjmp	.+0      	; 0x246 <lcd_init_4d+0xc8>
 246:	00 00       	nop
 248:	08 95       	ret

0000024a <main>:

/******************************* Main Program Code *************************/
int main(void)
{
// configure the microprocessor pins for the data lines
    lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
 24a:	57 9a       	sbi	0x0a, 7	; 10
    lcd_D6_ddr |= (1<<lcd_D6_bit);
 24c:	56 9a       	sbi	0x0a, 6	; 10
    lcd_D5_ddr |= (1<<lcd_D5_bit);
 24e:	55 9a       	sbi	0x0a, 5	; 10
    lcd_D4_ddr |= (1<<lcd_D4_bit);
 250:	54 9a       	sbi	0x0a, 4	; 10

// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
 252:	21 9a       	sbi	0x04, 1	; 4
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
 254:	20 9a       	sbi	0x04, 0	; 4

// initialize the LCD controller as determined by the defines (LCD instructions)
    lcd_init_4d();                                  // initialize the LCD display for a 4-bit interface
 256:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_init_4d>
 25a:	8f e3       	ldi	r24, 0x3F	; 63
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <main+0x14>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x1a>
 264:	00 00       	nop
    //lcd_write_string_4d(program_author);

// set cursor to start of second line
    //lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
    _delay_us(80);                                  // 40 uS delay (min)
	getal++;
 266:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 26a:	8f 5f       	subi	r24, 0xFF	; 255
 26c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	9f ef       	ldi	r25, 0xFF	; 255
 272:	23 ed       	ldi	r18, 0xD3	; 211
 274:	80 e3       	ldi	r24, 0x30	; 48
 276:	91 50       	subi	r25, 0x01	; 1
 278:	20 40       	sbci	r18, 0x00	; 0
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x2c>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x36>
 280:	00 00       	nop
// display the second line of information
    //lcd_write_string_4d(program_version);
	//lcd_write_instruction_4d(lcd_SetCursor | lcd_LineThree);
	//lcd_write_string_4d(program_txt);
	//lcd_write_string_4d(program_txt2);
	DDRB = 0xFF;
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 40536;
 286:	88 e5       	ldi	r24, 0x58	; 88
 288:	9e e9       	ldi	r25, 0x9E	; 158
 28a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 28e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1A = 0x00;
 292:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<CS11) | (1<<CS10);;
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1 << TOIE1);
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei();
 2a2:	78 94       	sei
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <main+0x5a>

000002a6 <__vector_13>:
// endless loop
    while(1);
    return 0;
}

ISR(TIMER1_OVF_vect) {
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2f 93       	push	r18
 2b2:	3f 93       	push	r19
 2b4:	4f 93       	push	r20
 2b6:	5f 93       	push	r21
 2b8:	6f 93       	push	r22
 2ba:	7f 93       	push	r23
 2bc:	8f 93       	push	r24
 2be:	9f 93       	push	r25
 2c0:	af 93       	push	r26
 2c2:	bf 93       	push	r27
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
 2c8:	80 e8       	ldi	r24, 0x80	; 128
 2ca:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_write_instruction_4d>
	lcd_write_string_4d(" ");
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_write_string_4d>
	getal++;
 2d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2da:	8f 5f       	subi	r24, 0xFF	; 255
 2dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	lcd_write_character_4d(getal);
 2e0:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_write_character_4d>
	//_delay_us(80);
	PORTB ^= 0x10;
 2e4:	95 b1       	in	r25, 0x05	; 5
 2e6:	80 e1       	ldi	r24, 0x10	; 16
 2e8:	89 27       	eor	r24, r25
 2ea:	85 b9       	out	0x05, r24	; 5
	TCNT1 = 40536;
 2ec:	88 e5       	ldi	r24, 0x58	; 88
 2ee:	9e e9       	ldi	r25, 0x9E	; 158
 2f0:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2f4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <_exit>:
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
