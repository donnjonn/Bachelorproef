
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000476  0000050a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000476  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  00000516  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000516  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ad  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e4  00000000  00000000  000017c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000718  00000000  00000000  00001fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  000026c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053f  00000000  00000000  0000286c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088b  00000000  00000000  00002dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003636  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <main>
  9e:	0c 94 39 02 	jmp	0x472	; 0x472 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_write_4>:
const uint8_t right_string[] = "right";

//init timer2
void Timer2_Init(void)
{
	TCNT2=0x00;
  a6:	5f 98       	cbi	0x0b, 7	; 11
  a8:	88 23       	and	r24, r24
  aa:	0c f4       	brge	.+2      	; 0xae <lcd_write_4+0x8>
  ac:	5f 9a       	sbi	0x0b, 7	; 11
  ae:	5e 98       	cbi	0x0b, 6	; 11
  b0:	86 fd       	sbrc	r24, 6
  b2:	5e 9a       	sbi	0x0b, 6	; 11
  b4:	5d 98       	cbi	0x0b, 5	; 11
  b6:	85 fd       	sbrc	r24, 5
  b8:	5d 9a       	sbi	0x0b, 5	; 11
  ba:	5c 98       	cbi	0x0b, 4	; 11
  bc:	84 fd       	sbrc	r24, 4
  be:	5c 9a       	sbi	0x0b, 4	; 11
  c0:	29 9a       	sbi	0x05, 1	; 5
  c2:	85 e0       	ldi	r24, 0x05	; 5
  c4:	8a 95       	dec	r24
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_write_4+0x1e>
  c8:	00 00       	nop
  ca:	29 98       	cbi	0x05, 1	; 5
  cc:	85 e0       	ldi	r24, 0x05	; 5
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_write_4+0x28>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <lcd_write_character_4d>:
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	28 9a       	sbi	0x05, 0	; 5
  dc:	29 98       	cbi	0x05, 1	; 5
  de:	c8 2f       	mov	r28, r24
  e0:	d0 e0       	ldi	r29, 0x00	; 0
  e2:	ce 01       	movw	r24, r28
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
  e8:	ce 01       	movw	r24, r28
  ea:	82 95       	swap	r24
  ec:	92 95       	swap	r25
  ee:	90 7f       	andi	r25, 0xF0	; 240
  f0:	98 27       	eor	r25, r24
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	98 27       	eor	r25, r24
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <lcd_write_string_4d>:
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <lcd_write_string_4d+0xa>
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	8c 01       	movw	r16, r24
 110:	1a 82       	std	Y+2, r1	; 0x02
 112:	19 82       	std	Y+1, r1	; 0x01
 114:	e9 81       	ldd	r30, Y+1	; 0x01
 116:	fa 81       	ldd	r31, Y+2	; 0x02
 118:	e8 0f       	add	r30, r24
 11a:	f9 1f       	adc	r31, r25
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	d1 f0       	breq	.+52     	; 0x156 <lcd_write_string_4d+0x56>
 122:	e9 81       	ldd	r30, Y+1	; 0x01
 124:	fa 81       	ldd	r31, Y+2	; 0x02
 126:	e0 0f       	add	r30, r16
 128:	f1 1f       	adc	r31, r17
 12a:	80 81       	ld	r24, Z
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_write_character_4d>
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_write_string_4d+0x40>
 144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_write_string_4d+0x46>
 146:	00 00       	nop
 148:	e9 81       	ldd	r30, Y+1	; 0x01
 14a:	fa 81       	ldd	r31, Y+2	; 0x02
 14c:	e0 0f       	add	r30, r16
 14e:	f1 1f       	adc	r31, r17
 150:	80 81       	ld	r24, Z
 152:	81 11       	cpse	r24, r1
 154:	e6 cf       	rjmp	.-52     	; 0x122 <lcd_write_string_4d+0x22>
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <lcd_write_instruction_4d>:
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	28 98       	cbi	0x05, 0	; 5
 16a:	29 98       	cbi	0x05, 1	; 5
 16c:	c8 2f       	mov	r28, r24
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	ce 01       	movw	r24, r28
 172:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 176:	ce 01       	movw	r24, r28
 178:	82 95       	swap	r24
 17a:	92 95       	swap	r25
 17c:	90 7f       	andi	r25, 0xF0	; 240
 17e:	98 27       	eor	r25, r24
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	98 27       	eor	r25, r24
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <lcd_init_4d>:
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	81 ee       	ldi	r24, 0xE1	; 225
 192:	94 e0       	ldi	r25, 0x04	; 4
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <lcd_init_4d+0x6>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_init_4d+0x10>
 19e:	00 00       	nop
 1a0:	28 98       	cbi	0x05, 0	; 5
 1a2:	29 98       	cbi	0x05, 1	; 5
 1a4:	80 e3       	ldi	r24, 0x30	; 48
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 1ac:	8f e3       	ldi	r24, 0x3F	; 63
 1ae:	9c e9       	ldi	r25, 0x9C	; 156
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_init_4d+0x22>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_init_4d+0x28>
 1b6:	00 00       	nop
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 1c0:	8f e1       	ldi	r24, 0x1F	; 31
 1c2:	93 e0       	ldi	r25, 0x03	; 3
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init_4d+0x36>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_init_4d+0x3c>
 1ca:	00 00       	nop
 1cc:	80 e3       	ldi	r24, 0x30	; 48
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 1d4:	8f e1       	ldi	r24, 0x1F	; 31
 1d6:	93 e0       	ldi	r25, 0x03	; 3
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init_4d+0x4a>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_init_4d+0x50>
 1de:	00 00       	nop
 1e0:	88 e2       	ldi	r24, 0x28	; 40
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 1e8:	8f e3       	ldi	r24, 0x3F	; 63
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_init_4d+0x5e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_init_4d+0x64>
 1f2:	00 00       	nop
 1f4:	88 e2       	ldi	r24, 0x28	; 40
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 1fc:	8f e3       	ldi	r24, 0x3F	; 63
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_init_4d+0x72>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_init_4d+0x78>
 206:	00 00       	nop
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 210:	8f e3       	ldi	r24, 0x3F	; 63
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <lcd_init_4d+0x86>
 218:	00 c0       	rjmp	.+0      	; 0x21a <lcd_init_4d+0x8c>
 21a:	00 00       	nop
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 224:	8f e7       	ldi	r24, 0x7F	; 127
 226:	9e e3       	ldi	r25, 0x3E	; 62
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init_4d+0x9a>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_init_4d+0xa0>
 22e:	00 00       	nop
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 238:	8f e3       	ldi	r24, 0x3F	; 63
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_init_4d+0xae>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_init_4d+0xb4>
 242:	00 00       	nop
 244:	8c e0       	ldi	r24, 0x0C	; 12
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 24c:	8f e3       	ldi	r24, 0x3F	; 63
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_init_4d+0xc2>
 254:	00 c0       	rjmp	.+0      	; 0x256 <lcd_init_4d+0xc8>
 256:	00 00       	nop
 258:	08 95       	ret

0000025a <RotaryInit>:
 25a:	87 b1       	in	r24, 0x07	; 7
 25c:	88 7f       	andi	r24, 0xF8	; 248
 25e:	87 b9       	out	0x07, r24	; 7
 260:	88 b1       	in	r24, 0x08	; 8
 262:	87 60       	ori	r24, 0x07	; 7
 264:	88 b9       	out	0x08, r24	; 8
 266:	08 95       	ret

00000268 <RotaryCheckStatus>:
 268:	30 99       	sbic	0x06, 0	; 6
 26a:	07 c0       	rjmp	.+14     	; 0x27a <RotaryCheckStatus+0x12>
 26c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 270:	81 11       	cpse	r24, r1
 272:	03 c0       	rjmp	.+6      	; 0x27a <RotaryCheckStatus+0x12>
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 27a:	31 99       	sbic	0x06, 1	; 6
 27c:	0c c0       	rjmp	.+24     	; 0x296 <RotaryCheckStatus+0x2e>
 27e:	30 99       	sbic	0x06, 0	; 6
 280:	0a c0       	rjmp	.+20     	; 0x296 <RotaryCheckStatus+0x2e>
 282:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 286:	88 23       	and	r24, r24
 288:	31 f0       	breq	.+12     	; 0x296 <RotaryCheckStatus+0x2e>
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <rotarystatus>
 290:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 294:	0e c0       	rjmp	.+28     	; 0x2b2 <RotaryCheckStatus+0x4a>
 296:	30 99       	sbic	0x06, 0	; 6
 298:	0c c0       	rjmp	.+24     	; 0x2b2 <RotaryCheckStatus+0x4a>
 29a:	31 9b       	sbis	0x06, 1	; 6
 29c:	0a c0       	rjmp	.+20     	; 0x2b2 <RotaryCheckStatus+0x4a>
 29e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 2a2:	88 23       	and	r24, r24
 2a4:	31 f0       	breq	.+12     	; 0x2b2 <RotaryCheckStatus+0x4a>
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <rotarystatus>
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 2b2:	30 9b       	sbis	0x06, 0	; 6
 2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <RotaryCheckStatus+0x5e>
 2b6:	31 9b       	sbis	0x06, 1	; 6
 2b8:	06 c0       	rjmp	.+12     	; 0x2c6 <RotaryCheckStatus+0x5e>
 2ba:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	11 f4       	brne	.+4      	; 0x2c6 <RotaryCheckStatus+0x5e>
 2c2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 2c6:	08 95       	ret

000002c8 <Timer2_Start>:
} 
//start timer2
void Timer2_Start(void)
{
	TCCR2B|=(1<<CS22)|(1<<CS21); //prescaler 256 ~122 interrupts/s
 2c8:	e1 eb       	ldi	r30, 0xB1	; 177
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	86 60       	ori	r24, 0x06	; 6
 2d0:	80 83       	st	Z, r24
	TIMSK2|=(1<<TOIE2);//Enable Timer0 Overflow interrupts
 2d2:	e0 e7       	ldi	r30, 0x70	; 112
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	81 60       	ori	r24, 0x01	; 1
 2da:	80 83       	st	Z, r24
 2dc:	08 95       	ret

000002de <__vector_9>:
}
//timer ISR check for rotary encoder status
ISR(TIMER2_OVF_vect)
{
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
	//reading rotary and button
	RotaryCheckStatus();
 300:	0e 94 34 01 	call	0x268	; 0x268 <RotaryCheckStatus>
}
 304:	ff 91       	pop	r31
 306:	ef 91       	pop	r30
 308:	bf 91       	pop	r27
 30a:	af 91       	pop	r26
 30c:	9f 91       	pop	r25
 30e:	8f 91       	pop	r24
 310:	7f 91       	pop	r23
 312:	6f 91       	pop	r22
 314:	5f 91       	pop	r21
 316:	4f 91       	pop	r20
 318:	3f 91       	pop	r19
 31a:	2f 91       	pop	r18
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <MainScreenUpdate>:
}

//return button status
uint8_t RotaryGetStatus(void)
{
return rotarystatus;
 326:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <rotarystatus>
void MainScreenUpdate(void)
{
		//lcd_write_string_4d("doubt");
		//_delay_us(80);
		//update encoder status on screen
		if (RotaryGetStatus() == 1)
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	19 f5       	brne	.+70     	; 0x374 <MainScreenUpdate+0x4e>
		{	
			
			PORTB ^=  0x10;
 32e:	95 b1       	in	r25, 0x05	; 5
 330:	80 e1       	ldi	r24, 0x10	; 16
 332:	89 27       	eor	r24, r25
 334:	85 b9       	out	0x05, r24	; 5
			lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
 336:	80 ec       	ldi	r24, 0xC0	; 192
 338:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33c:	8f e3       	ldi	r24, 0x3F	; 63
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <MainScreenUpdate+0x1a>
 344:	00 c0       	rjmp	.+0      	; 0x346 <MainScreenUpdate+0x20>
 346:	00 00       	nop
			_delay_us(80);
			lcd_write_instruction_4d(lcd_Clear);
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 34e:	8f e3       	ldi	r24, 0x3F	; 63
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <MainScreenUpdate+0x2c>
 356:	00 c0       	rjmp	.+0      	; 0x358 <MainScreenUpdate+0x32>
 358:	00 00       	nop
			_delay_us(80);
			//ks0108DrawRoundRect(5, 20, 117, 20, 8, BLACK);
			//ks0108GotoXY(20,25);
			lcd_write_string_4d("left");
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 80 00 	call	0x100	; 0x100 <lcd_write_string_4d>
 362:	8f e3       	ldi	r24, 0x3F	; 63
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <MainScreenUpdate+0x40>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <MainScreenUpdate+0x46>
 36c:	00 00       	nop
}
//reset status
void RotaryResetStatus(void)
{
rotarystatus=0;
 36e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rotarystatus>
 372:	08 95       	ret
			_delay_us(80);
			RotaryResetStatus();
		}
		else if (RotaryGetStatus() == 2)
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	11 f5       	brne	.+68     	; 0x3bc <MainScreenUpdate+0x96>
		{	
			PORTB ^=  0x10;
 378:	95 b1       	in	r25, 0x05	; 5
 37a:	80 e1       	ldi	r24, 0x10	; 16
 37c:	89 27       	eor	r24, r25
 37e:	85 b9       	out	0x05, r24	; 5
			lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
 380:	80 ec       	ldi	r24, 0xC0	; 192
 382:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 386:	8f e3       	ldi	r24, 0x3F	; 63
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <MainScreenUpdate+0x64>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <MainScreenUpdate+0x6a>
 390:	00 00       	nop
			_delay_us(80);
			lcd_write_instruction_4d(lcd_Clear);
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 398:	8f e3       	ldi	r24, 0x3F	; 63
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <MainScreenUpdate+0x76>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <MainScreenUpdate+0x7c>
 3a2:	00 00       	nop
			_delay_us(80);
			//ks0108DrawRoundRect(5, 20, 117, 20, 8, BLACK);
			//ks0108GotoXY(20,25);
			lcd_write_string_4d("right");
 3a4:	86 e0       	ldi	r24, 0x06	; 6
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 80 00 	call	0x100	; 0x100 <lcd_write_string_4d>
 3ac:	8f e3       	ldi	r24, 0x3F	; 63
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <MainScreenUpdate+0x8a>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <MainScreenUpdate+0x90>
 3b6:	00 00       	nop
 3b8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rotarystatus>
 3bc:	08 95       	ret

000003be <MainInit>:
	//ks0108ClearScreen();
	//lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
	//ks0108Puts_P(DEMO);
	//init rottary
	
	RotaryInit();
 3be:	0e 94 2d 01 	call	0x25a	; 0x25a <RotaryInit>
const uint8_t right_string[] = "right";

//init timer2
void Timer2_Init(void)
{
	TCNT2=0x00;
 3c2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	//taimerio 2 nustatymas
	Timer2_Init();
	//Taimerio 2 paleidimas
	Timer2_Start();
 3c6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Timer2_Start>
	//enable global interrupts
	sei();
 3ca:	78 94       	sei
 3cc:	08 95       	ret

000003ce <main>:
}
int main(void)
{
	
// configure the microprocessor pins for the data lines
    lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
 3ce:	57 9a       	sbi	0x0a, 7	; 10
    lcd_D6_ddr |= (1<<lcd_D6_bit);
 3d0:	56 9a       	sbi	0x0a, 6	; 10
    lcd_D5_ddr |= (1<<lcd_D5_bit);
 3d2:	55 9a       	sbi	0x0a, 5	; 10
    lcd_D4_ddr |= (1<<lcd_D4_bit);
 3d4:	54 9a       	sbi	0x0a, 4	; 10

// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
 3d6:	21 9a       	sbi	0x04, 1	; 4
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
 3d8:	20 9a       	sbi	0x04, 0	; 4

// initialize the LCD controller as determined by the defines (LCD instructions)
    lcd_init_4d();                                  // initialize the LCD display for a 4-bit interface
 3da:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_init_4d>
	
// display the first line of information
    //lcd_write_string_4d(program_author);

// set cursor to start of second line
    lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
 3de:	80 ec       	ldi	r24, 0xC0	; 192
 3e0:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 3e4:	8f e3       	ldi	r24, 0x3F	; 63
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <main+0x1a>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x20>
 3ee:	00 00       	nop
    _delay_us(80);                                  // 40 uS delay (min)
	getal++;
 3f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3f4:	8f 5f       	subi	r24, 0xFF	; 255
 3f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fa:	9f ef       	ldi	r25, 0xFF	; 255
 3fc:	23 ed       	ldi	r18, 0xD3	; 211
 3fe:	80 e3       	ldi	r24, 0x30	; 48
 400:	91 50       	subi	r25, 0x01	; 1
 402:	20 40       	sbci	r18, 0x00	; 0
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	e1 f7       	brne	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
	
	_delay_ms(1000);
// display the second line of information
    //lcd_write_string_4d(program_version);
	
	DDRB = 0xFF;
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 40536;
 410:	88 e5       	ldi	r24, 0x58	; 88
 412:	9e e9       	ldi	r25, 0x9E	; 158
 414:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 418:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1A = 0x00;
 41c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<CS11) | (1<<CS10);; //clock / 64
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1 << TOIE1);
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei(); //enable interrupt
 42c:	78 94       	sei
	MainInit();
 42e:	0e 94 df 01 	call	0x3be	; 0x3be <MainInit>
 432:	9f ef       	ldi	r25, 0xFF	; 255
 434:	21 ee       	ldi	r18, 0xE1	; 225
 436:	84 e0       	ldi	r24, 0x04	; 4
 438:	91 50       	subi	r25, 0x01	; 1
 43a:	20 40       	sbci	r18, 0x00	; 0
 43c:	80 40       	sbci	r24, 0x00	; 0
 43e:	e1 f7       	brne	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 442:	00 00       	nop
// endless loop
    while(1){
		_delay_ms(100);
		MainScreenUpdate();
 444:	0e 94 93 01 	call	0x326	; 0x326 <MainScreenUpdate>
 448:	f4 cf       	rjmp	.-24     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>

0000044a <__vector_13>:
	
	}
    return 0;
}

ISR(TIMER1_OVF_vect) {
 44a:	1f 92       	push	r1
 44c:	0f 92       	push	r0
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	0f 92       	push	r0
 452:	11 24       	eor	r1, r1
 454:	8f 93       	push	r24
 456:	9f 93       	push	r25
	//lcd_write_string_4d(" ");
	//getal++;
	
	//lcd_write_character_4d(getal);
	//_delay_us(80);
	TCNT1 = 40536;
 458:	88 e5       	ldi	r24, 0x58	; 88
 45a:	9e e9       	ldi	r25, 0x9E	; 158
 45c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 460:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 464:	9f 91       	pop	r25
 466:	8f 91       	pop	r24
 468:	0f 90       	pop	r0
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	0f 90       	pop	r0
 46e:	1f 90       	pop	r1
 470:	18 95       	reti

00000472 <_exit>:
 472:	f8 94       	cli

00000474 <__stop_program>:
 474:	ff cf       	rjmp	.-2      	; 0x474 <__stop_program>
