
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000544  000005d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000544  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  000005da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000060c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000126f  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000801  00000000  00000000  00001957  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000727  00000000  00000000  00002158  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00002880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000570  00000000  00000000  00002a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008d4  00000000  00000000  00002fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000388c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <main>
  9e:	0c 94 a0 02 	jmp	0x540	; 0x540 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_write_4>:
uint8_t counter = 0;

//init timer2 
void Timer2_Init(void)
{
	TCNT2=0x00;
  a6:	5f 98       	cbi	0x0b, 7	; 11
  a8:	88 23       	and	r24, r24
  aa:	0c f4       	brge	.+2      	; 0xae <lcd_write_4+0x8>
  ac:	5f 9a       	sbi	0x0b, 7	; 11
  ae:	5e 98       	cbi	0x0b, 6	; 11
  b0:	86 fd       	sbrc	r24, 6
  b2:	5e 9a       	sbi	0x0b, 6	; 11
  b4:	5d 98       	cbi	0x0b, 5	; 11
  b6:	85 fd       	sbrc	r24, 5
  b8:	5d 9a       	sbi	0x0b, 5	; 11
  ba:	5c 98       	cbi	0x0b, 4	; 11
  bc:	84 fd       	sbrc	r24, 4
  be:	5c 9a       	sbi	0x0b, 4	; 11
  c0:	29 9a       	sbi	0x05, 1	; 5
  c2:	85 e0       	ldi	r24, 0x05	; 5
  c4:	8a 95       	dec	r24
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_write_4+0x1e>
  c8:	00 00       	nop
  ca:	29 98       	cbi	0x05, 1	; 5
  cc:	85 e0       	ldi	r24, 0x05	; 5
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_write_4+0x28>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <lcd_write_character_4d>:
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	28 9a       	sbi	0x05, 0	; 5
  dc:	29 98       	cbi	0x05, 1	; 5
  de:	c8 2f       	mov	r28, r24
  e0:	d0 e0       	ldi	r29, 0x00	; 0
  e2:	ce 01       	movw	r24, r28
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
  e8:	ce 01       	movw	r24, r28
  ea:	82 95       	swap	r24
  ec:	92 95       	swap	r25
  ee:	90 7f       	andi	r25, 0xF0	; 240
  f0:	98 27       	eor	r25, r24
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	98 27       	eor	r25, r24
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <lcd_write_string_4d>:
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <lcd_write_string_4d+0xa>
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	8c 01       	movw	r16, r24
 110:	1a 82       	std	Y+2, r1	; 0x02
 112:	19 82       	std	Y+1, r1	; 0x01
 114:	e9 81       	ldd	r30, Y+1	; 0x01
 116:	fa 81       	ldd	r31, Y+2	; 0x02
 118:	e8 0f       	add	r30, r24
 11a:	f9 1f       	adc	r31, r25
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	d1 f0       	breq	.+52     	; 0x156 <lcd_write_string_4d+0x56>
 122:	e9 81       	ldd	r30, Y+1	; 0x01
 124:	fa 81       	ldd	r31, Y+2	; 0x02
 126:	e0 0f       	add	r30, r16
 128:	f1 1f       	adc	r31, r17
 12a:	80 81       	ld	r24, Z
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_write_character_4d>
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_write_string_4d+0x40>
 144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_write_string_4d+0x46>
 146:	00 00       	nop
 148:	e9 81       	ldd	r30, Y+1	; 0x01
 14a:	fa 81       	ldd	r31, Y+2	; 0x02
 14c:	e0 0f       	add	r30, r16
 14e:	f1 1f       	adc	r31, r17
 150:	80 81       	ld	r24, Z
 152:	81 11       	cpse	r24, r1
 154:	e6 cf       	rjmp	.-52     	; 0x122 <lcd_write_string_4d+0x22>
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <lcd_write_instruction_4d>:
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	28 98       	cbi	0x05, 0	; 5
 16a:	29 98       	cbi	0x05, 1	; 5
 16c:	c8 2f       	mov	r28, r24
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	ce 01       	movw	r24, r28
 172:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 176:	ce 01       	movw	r24, r28
 178:	82 95       	swap	r24
 17a:	92 95       	swap	r25
 17c:	90 7f       	andi	r25, 0xF0	; 240
 17e:	98 27       	eor	r25, r24
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	98 27       	eor	r25, r24
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <lcd_init_4d>:
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	81 ee       	ldi	r24, 0xE1	; 225
 192:	94 e0       	ldi	r25, 0x04	; 4
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <lcd_init_4d+0x6>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_init_4d+0x10>
 19e:	00 00       	nop
 1a0:	28 98       	cbi	0x05, 0	; 5
 1a2:	29 98       	cbi	0x05, 1	; 5
 1a4:	80 e3       	ldi	r24, 0x30	; 48
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 1ac:	8f e3       	ldi	r24, 0x3F	; 63
 1ae:	9c e9       	ldi	r25, 0x9C	; 156
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_init_4d+0x22>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_init_4d+0x28>
 1b6:	00 00       	nop
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 1c0:	8f e1       	ldi	r24, 0x1F	; 31
 1c2:	93 e0       	ldi	r25, 0x03	; 3
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init_4d+0x36>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_init_4d+0x3c>
 1ca:	00 00       	nop
 1cc:	80 e3       	ldi	r24, 0x30	; 48
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 1d4:	8f e1       	ldi	r24, 0x1F	; 31
 1d6:	93 e0       	ldi	r25, 0x03	; 3
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init_4d+0x4a>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_init_4d+0x50>
 1de:	00 00       	nop
 1e0:	88 e2       	ldi	r24, 0x28	; 40
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 1e8:	8f e3       	ldi	r24, 0x3F	; 63
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_init_4d+0x5e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_init_4d+0x64>
 1f2:	00 00       	nop
 1f4:	88 e2       	ldi	r24, 0x28	; 40
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 1fc:	8f e3       	ldi	r24, 0x3F	; 63
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_init_4d+0x72>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_init_4d+0x78>
 206:	00 00       	nop
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 210:	8f e3       	ldi	r24, 0x3F	; 63
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <lcd_init_4d+0x86>
 218:	00 c0       	rjmp	.+0      	; 0x21a <lcd_init_4d+0x8c>
 21a:	00 00       	nop
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 224:	8f e7       	ldi	r24, 0x7F	; 127
 226:	9e e3       	ldi	r25, 0x3E	; 62
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init_4d+0x9a>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_init_4d+0xa0>
 22e:	00 00       	nop
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 238:	8f e3       	ldi	r24, 0x3F	; 63
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_init_4d+0xae>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_init_4d+0xb4>
 242:	00 00       	nop
 244:	8c e0       	ldi	r24, 0x0C	; 12
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 24c:	8f e3       	ldi	r24, 0x3F	; 63
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_init_4d+0xc2>
 254:	00 c0       	rjmp	.+0      	; 0x256 <lcd_init_4d+0xc8>
 256:	00 00       	nop
 258:	08 95       	ret

0000025a <RotaryInit>:
 25a:	87 b1       	in	r24, 0x07	; 7
 25c:	88 7f       	andi	r24, 0xF8	; 248
 25e:	87 b9       	out	0x07, r24	; 7
 260:	88 b1       	in	r24, 0x08	; 8
 262:	87 60       	ori	r24, 0x07	; 7
 264:	88 b9       	out	0x08, r24	; 8
 266:	08 95       	ret

00000268 <RotaryCheckStatus>:
 268:	86 b1       	in	r24, 0x06	; 6
 26a:	96 b1       	in	r25, 0x06	; 6
 26c:	80 fd       	sbrc	r24, 0
 26e:	0a c0       	rjmp	.+20     	; 0x284 <RotaryCheckStatus+0x1c>
 270:	91 ff       	sbrs	r25, 1
 272:	08 c0       	rjmp	.+16     	; 0x284 <RotaryCheckStatus+0x1c>
 274:	30 9b       	sbis	0x06, 0	; 6
 276:	fe cf       	rjmp	.-4      	; 0x274 <RotaryCheckStatus+0xc>
 278:	31 99       	sbic	0x06, 1	; 6
 27a:	23 c0       	rjmp	.+70     	; 0x2c2 <RotaryCheckStatus+0x5a>
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rotarystatus>
 282:	08 95       	ret
 284:	86 b1       	in	r24, 0x06	; 6
 286:	96 b1       	in	r25, 0x06	; 6
 288:	81 fd       	sbrc	r24, 1
 28a:	0a c0       	rjmp	.+20     	; 0x2a0 <RotaryCheckStatus+0x38>
 28c:	90 ff       	sbrs	r25, 0
 28e:	08 c0       	rjmp	.+16     	; 0x2a0 <RotaryCheckStatus+0x38>
 290:	31 9b       	sbis	0x06, 1	; 6
 292:	fe cf       	rjmp	.-4      	; 0x290 <RotaryCheckStatus+0x28>
 294:	30 99       	sbic	0x06, 0	; 6
 296:	15 c0       	rjmp	.+42     	; 0x2c2 <RotaryCheckStatus+0x5a>
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rotarystatus>
 29e:	08 95       	ret
 2a0:	86 b1       	in	r24, 0x06	; 6
 2a2:	96 b1       	in	r25, 0x06	; 6
 2a4:	80 fd       	sbrc	r24, 0
 2a6:	0d c0       	rjmp	.+26     	; 0x2c2 <RotaryCheckStatus+0x5a>
 2a8:	91 fd       	sbrc	r25, 1
 2aa:	0b c0       	rjmp	.+22     	; 0x2c2 <RotaryCheckStatus+0x5a>
 2ac:	30 9b       	sbis	0x06, 0	; 6
 2ae:	fe cf       	rjmp	.-4      	; 0x2ac <RotaryCheckStatus+0x44>
 2b0:	31 99       	sbic	0x06, 1	; 6
 2b2:	04 c0       	rjmp	.+8      	; 0x2bc <RotaryCheckStatus+0x54>
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rotarystatus>
 2ba:	08 95       	ret
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rotarystatus>
 2c2:	08 95       	ret

000002c4 <Timer2_Start>:
} 
//start timer2
void Timer2_Start(void)
{
	TCCR2B|=(1<<CS22)|(1<<CS21)|(1<<CS20); //prescaler 256 ~122 interrupts/s
 2c4:	e1 eb       	ldi	r30, 0xB1	; 177
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	87 60       	ori	r24, 0x07	; 7
 2cc:	80 83       	st	Z, r24
	TIMSK2|=(1<<TOIE2);//Enable Timer0 Overflow interrupts
 2ce:	e0 e7       	ldi	r30, 0x70	; 112
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	81 60       	ori	r24, 0x01	; 1
 2d6:	80 83       	st	Z, r24
 2d8:	08 95       	ret

000002da <__vector_9>:
}
//timer ISR check for rotary encoder status
ISR(TIMER2_OVF_vect)
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	2f 93       	push	r18
 2e6:	3f 93       	push	r19
 2e8:	4f 93       	push	r20
 2ea:	5f 93       	push	r21
 2ec:	6f 93       	push	r22
 2ee:	7f 93       	push	r23
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
 2f8:	ef 93       	push	r30
 2fa:	ff 93       	push	r31
	//reading rotary and button
	RotaryCheckStatus();
 2fc:	0e 94 34 01 	call	0x268	; 0x268 <RotaryCheckStatus>
}
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	bf 91       	pop	r27
 306:	af 91       	pop	r26
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	7f 91       	pop	r23
 30e:	6f 91       	pop	r22
 310:	5f 91       	pop	r21
 312:	4f 91       	pop	r20
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <MainScreenUpdate>:
}

//return button status
uint8_t RotaryGetStatus(void)
{
	return rotarystatus;
 322:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rotarystatus>
void MainScreenUpdate(void)
{
		//lcd_write_string_4d("doubt");
		//_delay_us(80);
		//update encoder status on screen
		if (RotaryGetStatus() == 1)
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	51 f5       	brne	.+84     	; 0x37e <MainScreenUpdate+0x5c>
}
//reset status
void RotaryResetStatus(void)
{
	rotarystatus=0;
 32a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rotarystatus>
		{	
			RotaryResetStatus();
			lcd_write_instruction_4d(lcd_Clear);
 32e:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 332:	8f e7       	ldi	r24, 0x7F	; 127
 334:	9e e3       	ldi	r25, 0x3E	; 62
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <MainScreenUpdate+0x14>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <MainScreenUpdate+0x1a>
 33c:	00 00       	nop
			_delay_ms(4);
			lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
 33e:	80 ec       	ldi	r24, 0xC0	; 192
 340:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 344:	8f e3       	ldi	r24, 0x3F	; 63
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <MainScreenUpdate+0x26>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <MainScreenUpdate+0x2c>
 34e:	00 00       	nop
			_delay_us(80);
			//ks0108DrawRoundRect(5, 20, 117, 20, 8, BLACK);
			//ks0108GotoXY(20,25);
			counter--;
 350:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 354:	81 50       	subi	r24, 0x01	; 1
 356:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			itoa(counter, counterstring, 10);
 35a:	4a e0       	ldi	r20, 0x0A	; 10
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	63 e0       	ldi	r22, 0x03	; 3
 360:	71 e0       	ldi	r23, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 60 02 	call	0x4c0	; 0x4c0 <itoa>
			lcd_write_string_4d(counterstring);
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 80 00 	call	0x100	; 0x100 <lcd_write_string_4d>
 370:	8f e3       	ldi	r24, 0x3F	; 63
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <MainScreenUpdate+0x52>
 378:	00 c0       	rjmp	.+0      	; 0x37a <MainScreenUpdate+0x58>
 37a:	00 00       	nop
 37c:	08 95       	ret
			_delay_us(80);
		}
		else if (RotaryGetStatus() == 2)
 37e:	82 30       	cpi	r24, 0x02	; 2
 380:	51 f5       	brne	.+84     	; 0x3d6 <MainScreenUpdate+0xb4>
 382:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rotarystatus>
		{	
			RotaryResetStatus();
			lcd_write_instruction_4d(lcd_Clear);
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38c:	8f e7       	ldi	r24, 0x7F	; 127
 38e:	9e e3       	ldi	r25, 0x3E	; 62
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <MainScreenUpdate+0x6e>
 394:	00 c0       	rjmp	.+0      	; 0x396 <MainScreenUpdate+0x74>
 396:	00 00       	nop
			_delay_ms(4);
			lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
 398:	80 ec       	ldi	r24, 0xC0	; 192
 39a:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39e:	8f e3       	ldi	r24, 0x3F	; 63
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <MainScreenUpdate+0x80>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <MainScreenUpdate+0x86>
 3a8:	00 00       	nop
			_delay_us(80);
			//ks0108DrawRoundRect(5, 20, 117, 20, 8, BLACK);
			//ks0108GotoXY(20,25);
			counter++;
 3aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 3ae:	8f 5f       	subi	r24, 0xFF	; 255
 3b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			itoa(counter, counterstring, 10);
 3b4:	4a e0       	ldi	r20, 0x0A	; 10
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	63 e0       	ldi	r22, 0x03	; 3
 3ba:	71 e0       	ldi	r23, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 60 02 	call	0x4c0	; 0x4c0 <itoa>
			lcd_write_string_4d(counterstring);
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 80 00 	call	0x100	; 0x100 <lcd_write_string_4d>
 3ca:	8f e3       	ldi	r24, 0x3F	; 63
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <MainScreenUpdate+0xac>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <MainScreenUpdate+0xb2>
 3d4:	00 00       	nop
 3d6:	08 95       	ret

000003d8 <MainInit>:
	//ks0108ClearScreen();
	//lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
	//ks0108Puts_P(DEMO);
	//init rottary
	
	RotaryInit();
 3d8:	0e 94 2d 01 	call	0x25a	; 0x25a <RotaryInit>
uint8_t counter = 0;

//init timer2 
void Timer2_Init(void)
{
	TCNT2=0x00;
 3dc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	//taimerio 2 nustatymas
	Timer2_Init();
	//Taimerio 2 paleidimas
	Timer2_Start();
 3e0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Timer2_Start>
	//enable global interrupts
	DDRD = 0xf0;
 3e4:	80 ef       	ldi	r24, 0xF0	; 240
 3e6:	8a b9       	out	0x0a, r24	; 10
	EICRA |= (1<<ISC00);
 3e8:	e9 e6       	ldi	r30, 0x69	; 105
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	81 60       	ori	r24, 0x01	; 1
 3f0:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);
 3f2:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
 3f4:	78 94       	sei
 3f6:	08 95       	ret

000003f8 <main>:
}
int main(void)
{
	
// configure the microprocessor pins for the data lines
    lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
 3f8:	57 9a       	sbi	0x0a, 7	; 10
    lcd_D6_ddr |= (1<<lcd_D6_bit);
 3fa:	56 9a       	sbi	0x0a, 6	; 10
    lcd_D5_ddr |= (1<<lcd_D5_bit);
 3fc:	55 9a       	sbi	0x0a, 5	; 10
    lcd_D4_ddr |= (1<<lcd_D4_bit);
 3fe:	54 9a       	sbi	0x0a, 4	; 10

// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
 400:	21 9a       	sbi	0x04, 1	; 4
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
 402:	20 9a       	sbi	0x04, 0	; 4

// initialize the LCD controller as determined by the defines (LCD instructions)
    lcd_init_4d();                                  // initialize the LCD display for a 4-bit interface
 404:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_init_4d>
	
// display the first line of information
    //lcd_write_string_4d(program_author);

// set cursor to start of second line
    lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
 408:	80 ec       	ldi	r24, 0xC0	; 192
 40a:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 40e:	8f e3       	ldi	r24, 0x3F	; 63
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 418:	00 00       	nop
    _delay_us(80);                                  // 40 uS delay (min)
	getal++;
 41a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 41e:	8f 5f       	subi	r24, 0xFF	; 255
 420:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 424:	9f ef       	ldi	r25, 0xFF	; 255
 426:	23 ed       	ldi	r18, 0xD3	; 211
 428:	80 e3       	ldi	r24, 0x30	; 48
 42a:	91 50       	subi	r25, 0x01	; 1
 42c:	20 40       	sbci	r18, 0x00	; 0
 42e:	80 40       	sbci	r24, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 434:	00 00       	nop
	
	_delay_ms(1000);
// display the second line of information
    //lcd_write_string_4d(program_version);
	
	DDRB = 0xFF;
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 40536;
 43a:	88 e5       	ldi	r24, 0x58	; 88
 43c:	9e e9       	ldi	r25, 0x9E	; 158
 43e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 442:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1A = 0x00;
 446:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<CS11) | (1<<CS10);; //clock / 64
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1 << TOIE1);
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei(); //enable interrupt
 456:	78 94       	sei
	MainInit();
 458:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MainInit>
 45c:	9f ef       	ldi	r25, 0xFF	; 255
 45e:	21 ee       	ldi	r18, 0xE1	; 225
 460:	84 e0       	ldi	r24, 0x04	; 4
 462:	91 50       	subi	r25, 0x01	; 1
 464:	20 40       	sbci	r18, 0x00	; 0
 466:	80 40       	sbci	r24, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46c:	00 00       	nop
// endless loop
    while(1){
		_delay_ms(100);
		MainScreenUpdate();
 46e:	0e 94 91 01 	call	0x322	; 0x322 <MainScreenUpdate>
 472:	f4 cf       	rjmp	.-24     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>

00000474 <__vector_13>:
	}
    return 0;
}

ISR(TIMER1_OVF_vect) {
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
	//lcd_write_string_4d(" ");
	//getal++;
	
	//lcd_write_character_4d(getal);
	//_delay_us(80);
	TCNT1 = 40536;
 482:	88 e5       	ldi	r24, 0x58	; 88
 484:	9e e9       	ldi	r25, 0x9E	; 158
 486:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 48a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 48e:	9f 91       	pop	r25
 490:	8f 91       	pop	r24
 492:	0f 90       	pop	r0
 494:	0f be       	out	0x3f, r0	; 63
 496:	0f 90       	pop	r0
 498:	1f 90       	pop	r1
 49a:	18 95       	reti

0000049c <__vector_2>:

ISR(INT1_vect)
{
 49c:	1f 92       	push	r1
 49e:	0f 92       	push	r0
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	0f 92       	push	r0
 4a4:	11 24       	eor	r1, r1
 4a6:	8f 93       	push	r24
 4a8:	9f 93       	push	r25
	PORTB ^= 0x10;
 4aa:	95 b1       	in	r25, 0x05	; 5
 4ac:	80 e1       	ldi	r24, 0x10	; 16
 4ae:	89 27       	eor	r24, r25
 4b0:	85 b9       	out	0x05, r24	; 5
}
 4b2:	9f 91       	pop	r25
 4b4:	8f 91       	pop	r24
 4b6:	0f 90       	pop	r0
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	0f 90       	pop	r0
 4bc:	1f 90       	pop	r1
 4be:	18 95       	reti

000004c0 <itoa>:
 4c0:	45 32       	cpi	r20, 0x25	; 37
 4c2:	51 05       	cpc	r21, r1
 4c4:	20 f4       	brcc	.+8      	; 0x4ce <itoa+0xe>
 4c6:	42 30       	cpi	r20, 0x02	; 2
 4c8:	10 f0       	brcs	.+4      	; 0x4ce <itoa+0xe>
 4ca:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__itoa_ncheck>
 4ce:	fb 01       	movw	r30, r22
 4d0:	10 82       	st	Z, r1
 4d2:	cb 01       	movw	r24, r22
 4d4:	08 95       	ret

000004d6 <__itoa_ncheck>:
 4d6:	bb 27       	eor	r27, r27
 4d8:	4a 30       	cpi	r20, 0x0A	; 10
 4da:	31 f4       	brne	.+12     	; 0x4e8 <__itoa_ncheck+0x12>
 4dc:	99 23       	and	r25, r25
 4de:	22 f4       	brpl	.+8      	; 0x4e8 <__itoa_ncheck+0x12>
 4e0:	bd e2       	ldi	r27, 0x2D	; 45
 4e2:	90 95       	com	r25
 4e4:	81 95       	neg	r24
 4e6:	9f 4f       	sbci	r25, 0xFF	; 255
 4e8:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__utoa_common>

000004ec <__utoa_ncheck>:
 4ec:	bb 27       	eor	r27, r27

000004ee <__utoa_common>:
 4ee:	fb 01       	movw	r30, r22
 4f0:	55 27       	eor	r21, r21
 4f2:	aa 27       	eor	r26, r26
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	aa 1f       	adc	r26, r26
 4fa:	a4 17       	cp	r26, r20
 4fc:	10 f0       	brcs	.+4      	; 0x502 <__utoa_common+0x14>
 4fe:	a4 1b       	sub	r26, r20
 500:	83 95       	inc	r24
 502:	50 51       	subi	r21, 0x10	; 16
 504:	b9 f7       	brne	.-18     	; 0x4f4 <__utoa_common+0x6>
 506:	a0 5d       	subi	r26, 0xD0	; 208
 508:	aa 33       	cpi	r26, 0x3A	; 58
 50a:	08 f0       	brcs	.+2      	; 0x50e <__utoa_common+0x20>
 50c:	a9 5d       	subi	r26, 0xD9	; 217
 50e:	a1 93       	st	Z+, r26
 510:	00 97       	sbiw	r24, 0x00	; 0
 512:	79 f7       	brne	.-34     	; 0x4f2 <__utoa_common+0x4>
 514:	b1 11       	cpse	r27, r1
 516:	b1 93       	st	Z+, r27
 518:	11 92       	st	Z+, r1
 51a:	cb 01       	movw	r24, r22
 51c:	0c 94 90 02 	jmp	0x520	; 0x520 <strrev>

00000520 <strrev>:
 520:	dc 01       	movw	r26, r24
 522:	fc 01       	movw	r30, r24
 524:	67 2f       	mov	r22, r23
 526:	71 91       	ld	r23, Z+
 528:	77 23       	and	r23, r23
 52a:	e1 f7       	brne	.-8      	; 0x524 <strrev+0x4>
 52c:	32 97       	sbiw	r30, 0x02	; 2
 52e:	04 c0       	rjmp	.+8      	; 0x538 <strrev+0x18>
 530:	7c 91       	ld	r23, X
 532:	6d 93       	st	X+, r22
 534:	70 83       	st	Z, r23
 536:	62 91       	ld	r22, -Z
 538:	ae 17       	cp	r26, r30
 53a:	bf 07       	cpc	r27, r31
 53c:	c8 f3       	brcs	.-14     	; 0x530 <strrev+0x10>
 53e:	08 95       	ret

00000540 <_exit>:
 540:	f8 94       	cli

00000542 <__stop_program>:
 542:	ff cf       	rjmp	.-2      	; 0x542 <__stop_program>
