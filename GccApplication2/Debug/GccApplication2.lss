
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000005b2  00000646  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  00000648  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012bb  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000810  00000000  00000000  00001a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000076e  00000000  00000000  0000221f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00002990  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000586  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008d4  00000000  00000000  000030de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000039b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 85 02 	jmp	0x50a	; 0x50a <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 44 02 	call	0x488	; 0x488 <main>
  9e:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_write_4>:
static uint8_t voristatus = 0;
uint8_t accum2 = 0;
//init timer2 
void Timer2_Init(void)
{
	TCNT2=0x00;
  a6:	5f 98       	cbi	0x0b, 7	; 11
  a8:	88 23       	and	r24, r24
  aa:	0c f4       	brge	.+2      	; 0xae <lcd_write_4+0x8>
  ac:	5f 9a       	sbi	0x0b, 7	; 11
  ae:	5e 98       	cbi	0x0b, 6	; 11
  b0:	86 fd       	sbrc	r24, 6
  b2:	5e 9a       	sbi	0x0b, 6	; 11
  b4:	5d 98       	cbi	0x0b, 5	; 11
  b6:	85 fd       	sbrc	r24, 5
  b8:	5d 9a       	sbi	0x0b, 5	; 11
  ba:	5c 98       	cbi	0x0b, 4	; 11
  bc:	84 fd       	sbrc	r24, 4
  be:	5c 9a       	sbi	0x0b, 4	; 11
  c0:	29 9a       	sbi	0x05, 1	; 5
  c2:	85 e0       	ldi	r24, 0x05	; 5
  c4:	8a 95       	dec	r24
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_write_4+0x1e>
  c8:	00 00       	nop
  ca:	29 98       	cbi	0x05, 1	; 5
  cc:	85 e0       	ldi	r24, 0x05	; 5
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_write_4+0x28>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <lcd_write_character_4d>:
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	28 9a       	sbi	0x05, 0	; 5
  dc:	29 98       	cbi	0x05, 1	; 5
  de:	c8 2f       	mov	r28, r24
  e0:	d0 e0       	ldi	r29, 0x00	; 0
  e2:	ce 01       	movw	r24, r28
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
  e8:	ce 01       	movw	r24, r28
  ea:	82 95       	swap	r24
  ec:	92 95       	swap	r25
  ee:	90 7f       	andi	r25, 0xF0	; 240
  f0:	98 27       	eor	r25, r24
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	98 27       	eor	r25, r24
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <lcd_write_string_4d>:
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <lcd_write_string_4d+0xa>
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	8c 01       	movw	r16, r24
 110:	1a 82       	std	Y+2, r1	; 0x02
 112:	19 82       	std	Y+1, r1	; 0x01
 114:	e9 81       	ldd	r30, Y+1	; 0x01
 116:	fa 81       	ldd	r31, Y+2	; 0x02
 118:	e8 0f       	add	r30, r24
 11a:	f9 1f       	adc	r31, r25
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	d1 f0       	breq	.+52     	; 0x156 <lcd_write_string_4d+0x56>
 122:	e9 81       	ldd	r30, Y+1	; 0x01
 124:	fa 81       	ldd	r31, Y+2	; 0x02
 126:	e0 0f       	add	r30, r16
 128:	f1 1f       	adc	r31, r17
 12a:	80 81       	ld	r24, Z
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_write_character_4d>
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_write_string_4d+0x40>
 144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_write_string_4d+0x46>
 146:	00 00       	nop
 148:	e9 81       	ldd	r30, Y+1	; 0x01
 14a:	fa 81       	ldd	r31, Y+2	; 0x02
 14c:	e0 0f       	add	r30, r16
 14e:	f1 1f       	adc	r31, r17
 150:	80 81       	ld	r24, Z
 152:	81 11       	cpse	r24, r1
 154:	e6 cf       	rjmp	.-52     	; 0x122 <lcd_write_string_4d+0x22>
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <lcd_write_instruction_4d>:
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	28 98       	cbi	0x05, 0	; 5
 16a:	29 98       	cbi	0x05, 1	; 5
 16c:	c8 2f       	mov	r28, r24
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	ce 01       	movw	r24, r28
 172:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 176:	ce 01       	movw	r24, r28
 178:	82 95       	swap	r24
 17a:	92 95       	swap	r25
 17c:	90 7f       	andi	r25, 0xF0	; 240
 17e:	98 27       	eor	r25, r24
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	98 27       	eor	r25, r24
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <lcd_init_4d>:
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	81 ee       	ldi	r24, 0xE1	; 225
 192:	94 e0       	ldi	r25, 0x04	; 4
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <lcd_init_4d+0x6>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_init_4d+0x10>
 19e:	00 00       	nop
 1a0:	28 98       	cbi	0x05, 0	; 5
 1a2:	29 98       	cbi	0x05, 1	; 5
 1a4:	80 e3       	ldi	r24, 0x30	; 48
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 1ac:	8f e3       	ldi	r24, 0x3F	; 63
 1ae:	9c e9       	ldi	r25, 0x9C	; 156
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_init_4d+0x22>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_init_4d+0x28>
 1b6:	00 00       	nop
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 1c0:	8f e1       	ldi	r24, 0x1F	; 31
 1c2:	93 e0       	ldi	r25, 0x03	; 3
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init_4d+0x36>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_init_4d+0x3c>
 1ca:	00 00       	nop
 1cc:	80 e3       	ldi	r24, 0x30	; 48
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 1d4:	8f e1       	ldi	r24, 0x1F	; 31
 1d6:	93 e0       	ldi	r25, 0x03	; 3
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init_4d+0x4a>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_init_4d+0x50>
 1de:	00 00       	nop
 1e0:	88 e2       	ldi	r24, 0x28	; 40
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_4>
 1e8:	8f e3       	ldi	r24, 0x3F	; 63
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_init_4d+0x5e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_init_4d+0x64>
 1f2:	00 00       	nop
 1f4:	88 e2       	ldi	r24, 0x28	; 40
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 1fc:	8f e3       	ldi	r24, 0x3F	; 63
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_init_4d+0x72>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_init_4d+0x78>
 206:	00 00       	nop
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 210:	8f e3       	ldi	r24, 0x3F	; 63
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <lcd_init_4d+0x86>
 218:	00 c0       	rjmp	.+0      	; 0x21a <lcd_init_4d+0x8c>
 21a:	00 00       	nop
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 224:	8f e7       	ldi	r24, 0x7F	; 127
 226:	9e e3       	ldi	r25, 0x3E	; 62
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init_4d+0x9a>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_init_4d+0xa0>
 22e:	00 00       	nop
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 238:	8f e3       	ldi	r24, 0x3F	; 63
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_init_4d+0xae>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_init_4d+0xb4>
 242:	00 00       	nop
 244:	8c e0       	ldi	r24, 0x0C	; 12
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 24c:	8f e3       	ldi	r24, 0x3F	; 63
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_init_4d+0xc2>
 254:	00 c0       	rjmp	.+0      	; 0x256 <lcd_init_4d+0xc8>
 256:	00 00       	nop
 258:	08 95       	ret

0000025a <RotaryInit>:
 25a:	87 b1       	in	r24, 0x07	; 7
 25c:	88 7f       	andi	r24, 0xF8	; 248
 25e:	87 b9       	out	0x07, r24	; 7
 260:	88 b1       	in	r24, 0x08	; 8
 262:	87 60       	ori	r24, 0x07	; 7
 264:	88 b9       	out	0x08, r24	; 8
 266:	08 95       	ret

00000268 <RotaryCheckStatus>:
 268:	86 b1       	in	r24, 0x06	; 6
 26a:	96 b1       	in	r25, 0x06	; 6
 26c:	80 fd       	sbrc	r24, 0
 26e:	19 c0       	rjmp	.+50     	; 0x2a2 <RotaryCheckStatus+0x3a>
 270:	91 ff       	sbrs	r25, 1
 272:	17 c0       	rjmp	.+46     	; 0x2a2 <RotaryCheckStatus+0x3a>
 274:	30 9b       	sbis	0x06, 0	; 6
 276:	fe cf       	rjmp	.-4      	; 0x274 <RotaryCheckStatus+0xc>
 278:	31 99       	sbic	0x06, 1	; 6
 27a:	03 c0       	rjmp	.+6      	; 0x282 <RotaryCheckStatus+0x1a>
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rotarystatus>
 282:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <prevstatus>
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	31 f4       	brne	.+12     	; 0x296 <RotaryCheckStatus+0x2e>
 28a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <accum>
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <accum>
 294:	02 c0       	rjmp	.+4      	; 0x29a <RotaryCheckStatus+0x32>
 296:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <accum>
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <prevstatus>
 2a0:	08 95       	ret
 2a2:	86 b1       	in	r24, 0x06	; 6
 2a4:	96 b1       	in	r25, 0x06	; 6
 2a6:	81 fd       	sbrc	r24, 1
 2a8:	12 c0       	rjmp	.+36     	; 0x2ce <RotaryCheckStatus+0x66>
 2aa:	90 ff       	sbrs	r25, 0
 2ac:	10 c0       	rjmp	.+32     	; 0x2ce <RotaryCheckStatus+0x66>
 2ae:	31 9b       	sbis	0x06, 1	; 6
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <RotaryCheckStatus+0x46>
 2b2:	30 99       	sbic	0x06, 0	; 6
 2b4:	03 c0       	rjmp	.+6      	; 0x2bc <RotaryCheckStatus+0x54>
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rotarystatus>
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <prevstatus>
 2c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <accum>
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <accum>
 2cc:	08 95       	ret
 2ce:	86 b1       	in	r24, 0x06	; 6
 2d0:	96 b1       	in	r25, 0x06	; 6
 2d2:	80 fd       	sbrc	r24, 0
 2d4:	1b c0       	rjmp	.+54     	; 0x30c <RotaryCheckStatus+0xa4>
 2d6:	91 fd       	sbrc	r25, 1
 2d8:	19 c0       	rjmp	.+50     	; 0x30c <RotaryCheckStatus+0xa4>
 2da:	30 9b       	sbis	0x06, 0	; 6
 2dc:	fe cf       	rjmp	.-4      	; 0x2da <RotaryCheckStatus+0x72>
 2de:	31 99       	sbic	0x06, 1	; 6
 2e0:	0b c0       	rjmp	.+22     	; 0x2f8 <RotaryCheckStatus+0x90>
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rotarystatus>
 2e8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <prevstatus>
 2ec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <accum>
 2f0:	8f 5f       	subi	r24, 0xFF	; 255
 2f2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <accum>
 2f6:	08 95       	ret
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rotarystatus>
 2fe:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <prevstatus>
 302:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <accum>
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <accum>
 30c:	08 95       	ret

0000030e <RotaryResetStatus>:
 30e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <rotarystatus>
 312:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <accum>
 316:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <prevstatus>
 31a:	08 95       	ret

0000031c <Timer2_Start>:
} 
//start timer2
void Timer2_Start(void)
{
	TCCR2B|=(1<<CS22)|(1<<CS21)|(1<<CS20); //prescaler 256 ~122 interrupts/s
 31c:	e1 eb       	ldi	r30, 0xB1	; 177
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	87 60       	ori	r24, 0x07	; 7
 324:	80 83       	st	Z, r24
	TIMSK2|=(1<<TOIE2);//Enable Timer0 Overflow interrupts
 326:	e0 e7       	ldi	r30, 0x70	; 112
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	81 60       	ori	r24, 0x01	; 1
 32e:	80 83       	st	Z, r24
 330:	08 95       	ret

00000332 <__vector_9>:
}
//timer ISR check for rotary encoder status
ISR(TIMER2_OVF_vect)
{
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	2f 93       	push	r18
 33e:	3f 93       	push	r19
 340:	4f 93       	push	r20
 342:	5f 93       	push	r21
 344:	6f 93       	push	r22
 346:	7f 93       	push	r23
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	af 93       	push	r26
 34e:	bf 93       	push	r27
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
	//reading rotary and button
	RotaryCheckStatus();
 354:	0e 94 34 01 	call	0x268	; 0x268 <RotaryCheckStatus>
}
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	bf 91       	pop	r27
 35e:	af 91       	pop	r26
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	7f 91       	pop	r23
 366:	6f 91       	pop	r22
 368:	5f 91       	pop	r21
 36a:	4f 91       	pop	r20
 36c:	3f 91       	pop	r19
 36e:	2f 91       	pop	r18
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <MainScreenUpdate>:
}

//return button status
uint8_t RotaryGetStatus(void)
{
	return rotarystatus;
 37a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rotarystatus>
void MainScreenUpdate(void)
{
		//lcd_write_string_4d("doubt");
		//_delay_us(80);
		//update encoder status on screen
		if (RotaryGetStatus() == 1)
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	89 f5       	brne	.+98     	; 0x3e4 <MainScreenUpdate+0x6a>
				accum2++;
			}
			else{
				accum2==0;
			}
			RotaryResetStatus();
 382:	0e 94 87 01 	call	0x30e	; 0x30e <RotaryResetStatus>
			lcd_write_instruction_4d(lcd_Clear);
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38c:	8f e7       	ldi	r24, 0x7F	; 127
 38e:	9e e3       	ldi	r25, 0x3E	; 62
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <MainScreenUpdate+0x16>
 394:	00 c0       	rjmp	.+0      	; 0x396 <MainScreenUpdate+0x1c>
 396:	00 00       	nop
			_delay_ms(4);
			lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
 398:	80 ec       	ldi	r24, 0xC0	; 192
 39a:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39e:	8f e3       	ldi	r24, 0x3F	; 63
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <MainScreenUpdate+0x28>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <MainScreenUpdate+0x2e>
 3a8:	00 00       	nop
			_delay_us(80);
			//ks0108DrawRoundRect(5, 20, 117, 20, 8, BLACK);
			//ks0108GotoXY(20,25);
			counter= counter-1-(1*accum)-(1*accum2);
 3aa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <counter>
 3ae:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <accum>
 3b2:	89 1b       	sub	r24, r25
 3b4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 3b8:	89 1b       	sub	r24, r25
 3ba:	81 50       	subi	r24, 0x01	; 1
 3bc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <counter>
			itoa(counter, counterstring, 10);
 3c0:	4a e0       	ldi	r20, 0x0A	; 10
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	64 e0       	ldi	r22, 0x04	; 4
 3c6:	71 e0       	ldi	r23, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 97 02 	call	0x52e	; 0x52e <itoa>
			lcd_write_string_4d(counterstring);
 3ce:	84 e0       	ldi	r24, 0x04	; 4
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 80 00 	call	0x100	; 0x100 <lcd_write_string_4d>
 3d6:	8f e3       	ldi	r24, 0x3F	; 63
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <MainScreenUpdate+0x60>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <MainScreenUpdate+0x66>
 3e0:	00 00       	nop
 3e2:	08 95       	ret
			_delay_us(80);
			voristatus == 1;
		}
		else if (RotaryGetStatus() == 2)
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	69 f5       	brne	.+90     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				accum2++;
			}
			else{
				accum2==0;
			}
			RotaryResetStatus();
 3e8:	0e 94 87 01 	call	0x30e	; 0x30e <RotaryResetStatus>
			lcd_write_instruction_4d(lcd_Clear);
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f2:	8f e7       	ldi	r24, 0x7F	; 127
 3f4:	9e e3       	ldi	r25, 0x3E	; 62
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <MainScreenUpdate+0x7c>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <MainScreenUpdate+0x82>
 3fc:	00 00       	nop
			_delay_ms(4);
			lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
 3fe:	80 ec       	ldi	r24, 0xC0	; 192
 400:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 404:	8f e3       	ldi	r24, 0x3F	; 63
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
			_delay_us(80);
			//ks0108DrawRoundRect(5, 20, 117, 20, 8, BLACK);
			//ks0108GotoXY(20,25);
			counter = counter + 1 +(1*accum2);;
 410:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter>
 414:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 418:	89 0f       	add	r24, r25
 41a:	8f 5f       	subi	r24, 0xFF	; 255
 41c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <counter>
			itoa(counter, counterstring, 10);
 420:	4a e0       	ldi	r20, 0x0A	; 10
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	64 e0       	ldi	r22, 0x04	; 4
 426:	71 e0       	ldi	r23, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 97 02 	call	0x52e	; 0x52e <itoa>
			lcd_write_string_4d(counterstring);
 42e:	84 e0       	ldi	r24, 0x04	; 4
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	0e 94 80 00 	call	0x100	; 0x100 <lcd_write_string_4d>
 436:	8f e3       	ldi	r24, 0x3F	; 63
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 440:	00 00       	nop
 442:	08 95       	ret

00000444 <MainInit>:
	//ks0108SelectFont(SC, ks0108ReadFontData, BLACK);
	//startup
	//ks0108ClearScreen();
	//lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
	//ks0108Puts_P(DEMO);
	DDRB = 0xFF;
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 40536;
 448:	88 e5       	ldi	r24, 0x58	; 88
 44a:	9e e9       	ldi	r25, 0x9E	; 158
 44c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 450:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1A = 0x00;
 454:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<CS12) | (1<<CS10);; //clock / 64
 458:	85 e0       	ldi	r24, 0x05	; 5
 45a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1 << TOIE1);
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	//init rottary
	RotaryInit();
 464:	0e 94 2d 01 	call	0x25a	; 0x25a <RotaryInit>
static uint8_t voristatus = 0;
uint8_t accum2 = 0;
//init timer2 
void Timer2_Init(void)
{
	TCNT2=0x00;
 468:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	//taimerio 2 nustatymas
	Timer2_Init();
	//Taimerio 2 paleidimas
	Timer2_Start();
 46c:	0e 94 8e 01 	call	0x31c	; 0x31c <Timer2_Start>
	//enable global interrupts
	
	DDRD = 0xf0;
 470:	80 ef       	ldi	r24, 0xF0	; 240
 472:	8a b9       	out	0x0a, r24	; 10
	EIMSK &= ~(1 << INT0); //External Interrupt Mask Register - EIMSK - is for enabling INT[6;3:0] interrupts, INT0 is disabled to avoid false interrupts when mainuplating EICRA
 474:	e8 98       	cbi	0x1d, 0	; 29
	EICRA |= (1 << ISC01)|(1 << ISC00); //External Interrupt Control Register A - EICRA - defines the interrupt edge profile, here configured to trigger on rising edge
 476:	e9 e6       	ldi	r30, 0x69	; 105
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	83 60       	ori	r24, 0x03	; 3
 47e:	80 83       	st	Z, r24
	EIFR &= ~(1 << INTF0); //External Interrupt Flag Register - EIFR controls interrupt flags on INT[6;3:0], here it is cleared
 480:	e0 98       	cbi	0x1c, 0	; 28
	EIMSK |= (1 << INT0); //Enable INT0
 482:	e8 9a       	sbi	0x1d, 0	; 29
	//EICRA |= (1<<ISC00);
	//EIMSK |= (1<<INT0);
	sei();
 484:	78 94       	sei
 486:	08 95       	ret

00000488 <main>:
}
int main(void)
{
	
// configure the microprocessor pins for the data lines
    lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
 488:	57 9a       	sbi	0x0a, 7	; 10
    lcd_D6_ddr |= (1<<lcd_D6_bit);
 48a:	56 9a       	sbi	0x0a, 6	; 10
    lcd_D5_ddr |= (1<<lcd_D5_bit);
 48c:	55 9a       	sbi	0x0a, 5	; 10
    lcd_D4_ddr |= (1<<lcd_D4_bit);
 48e:	54 9a       	sbi	0x0a, 4	; 10

// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
 490:	21 9a       	sbi	0x04, 1	; 4
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
 492:	20 9a       	sbi	0x04, 0	; 4

// initialize the LCD controller as determined by the defines (LCD instructions)
    lcd_init_4d();                                  // initialize the LCD display for a 4-bit interface
 494:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_init_4d>
	
// display the first line of information
    //lcd_write_string_4d(program_author);

// set cursor to start of second line
    lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
 498:	80 ec       	ldi	r24, 0xC0	; 192
 49a:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_instruction_4d>
 49e:	8f e3       	ldi	r24, 0x3F	; 63
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <main+0x1a>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <main+0x20>
 4a8:	00 00       	nop
    _delay_us(80);                                  // 40 uS delay (min)
	getal++;
 4aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4ae:	8f 5f       	subi	r24, 0xFF	; 255
 4b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b4:	9f ef       	ldi	r25, 0xFF	; 255
 4b6:	23 ed       	ldi	r18, 0xD3	; 211
 4b8:	80 e3       	ldi	r24, 0x30	; 48
 4ba:	91 50       	subi	r25, 0x01	; 1
 4bc:	20 40       	sbci	r18, 0x00	; 0
 4be:	80 40       	sbci	r24, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <main+0x32>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <main+0x3c>
 4c4:	00 00       	nop
	
	_delay_ms(1000);
// display the second line of information
    //lcd_write_string_4d(program_version);
	 //enable interrupt
	MainInit();
 4c6:	0e 94 22 02 	call	0x444	; 0x444 <MainInit>
 4ca:	9f ef       	ldi	r25, 0xFF	; 255
 4cc:	21 ee       	ldi	r18, 0xE1	; 225
 4ce:	84 e0       	ldi	r24, 0x04	; 4
 4d0:	91 50       	subi	r25, 0x01	; 1
 4d2:	20 40       	sbci	r18, 0x00	; 0
 4d4:	80 40       	sbci	r24, 0x00	; 0
 4d6:	e1 f7       	brne	.-8      	; 0x4d0 <main+0x48>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <main+0x52>
 4da:	00 00       	nop
// endless loop
    while(1){
		_delay_ms(100);
		MainScreenUpdate();
 4dc:	0e 94 bd 01 	call	0x37a	; 0x37a <MainScreenUpdate>
 4e0:	f4 cf       	rjmp	.-24     	; 0x4ca <main+0x42>

000004e2 <__vector_13>:
	}
    return 0;
}

ISR(TIMER1_OVF_vect) {
 4e2:	1f 92       	push	r1
 4e4:	0f 92       	push	r0
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	0f 92       	push	r0
 4ea:	11 24       	eor	r1, r1
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
	//lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
	//lcd_write_string_4d(" ");
	//getal++
	//lcd_write_character_4d(getal);
	//_delay_us(80);
	TCNT1 = 40536;
 4f0:	88 e5       	ldi	r24, 0x58	; 88
 4f2:	9e e9       	ldi	r25, 0x9E	; 158
 4f4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 4f8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 4fc:	9f 91       	pop	r25
 4fe:	8f 91       	pop	r24
 500:	0f 90       	pop	r0
 502:	0f be       	out	0x3f, r0	; 63
 504:	0f 90       	pop	r0
 506:	1f 90       	pop	r1
 508:	18 95       	reti

0000050a <__vector_1>:

ISR(INT0_vect)
{
 50a:	1f 92       	push	r1
 50c:	0f 92       	push	r0
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	0f 92       	push	r0
 512:	11 24       	eor	r1, r1
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
	PORTB ^= 0x10;
 518:	95 b1       	in	r25, 0x05	; 5
 51a:	80 e1       	ldi	r24, 0x10	; 16
 51c:	89 27       	eor	r24, r25
 51e:	85 b9       	out	0x05, r24	; 5
}
 520:	9f 91       	pop	r25
 522:	8f 91       	pop	r24
 524:	0f 90       	pop	r0
 526:	0f be       	out	0x3f, r0	; 63
 528:	0f 90       	pop	r0
 52a:	1f 90       	pop	r1
 52c:	18 95       	reti

0000052e <itoa>:
 52e:	45 32       	cpi	r20, 0x25	; 37
 530:	51 05       	cpc	r21, r1
 532:	20 f4       	brcc	.+8      	; 0x53c <itoa+0xe>
 534:	42 30       	cpi	r20, 0x02	; 2
 536:	10 f0       	brcs	.+4      	; 0x53c <itoa+0xe>
 538:	0c 94 a2 02 	jmp	0x544	; 0x544 <__itoa_ncheck>
 53c:	fb 01       	movw	r30, r22
 53e:	10 82       	st	Z, r1
 540:	cb 01       	movw	r24, r22
 542:	08 95       	ret

00000544 <__itoa_ncheck>:
 544:	bb 27       	eor	r27, r27
 546:	4a 30       	cpi	r20, 0x0A	; 10
 548:	31 f4       	brne	.+12     	; 0x556 <__itoa_ncheck+0x12>
 54a:	99 23       	and	r25, r25
 54c:	22 f4       	brpl	.+8      	; 0x556 <__itoa_ncheck+0x12>
 54e:	bd e2       	ldi	r27, 0x2D	; 45
 550:	90 95       	com	r25
 552:	81 95       	neg	r24
 554:	9f 4f       	sbci	r25, 0xFF	; 255
 556:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__utoa_common>

0000055a <__utoa_ncheck>:
 55a:	bb 27       	eor	r27, r27

0000055c <__utoa_common>:
 55c:	fb 01       	movw	r30, r22
 55e:	55 27       	eor	r21, r21
 560:	aa 27       	eor	r26, r26
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	aa 1f       	adc	r26, r26
 568:	a4 17       	cp	r26, r20
 56a:	10 f0       	brcs	.+4      	; 0x570 <__utoa_common+0x14>
 56c:	a4 1b       	sub	r26, r20
 56e:	83 95       	inc	r24
 570:	50 51       	subi	r21, 0x10	; 16
 572:	b9 f7       	brne	.-18     	; 0x562 <__utoa_common+0x6>
 574:	a0 5d       	subi	r26, 0xD0	; 208
 576:	aa 33       	cpi	r26, 0x3A	; 58
 578:	08 f0       	brcs	.+2      	; 0x57c <__utoa_common+0x20>
 57a:	a9 5d       	subi	r26, 0xD9	; 217
 57c:	a1 93       	st	Z+, r26
 57e:	00 97       	sbiw	r24, 0x00	; 0
 580:	79 f7       	brne	.-34     	; 0x560 <__utoa_common+0x4>
 582:	b1 11       	cpse	r27, r1
 584:	b1 93       	st	Z+, r27
 586:	11 92       	st	Z+, r1
 588:	cb 01       	movw	r24, r22
 58a:	0c 94 c7 02 	jmp	0x58e	; 0x58e <strrev>

0000058e <strrev>:
 58e:	dc 01       	movw	r26, r24
 590:	fc 01       	movw	r30, r24
 592:	67 2f       	mov	r22, r23
 594:	71 91       	ld	r23, Z+
 596:	77 23       	and	r23, r23
 598:	e1 f7       	brne	.-8      	; 0x592 <strrev+0x4>
 59a:	32 97       	sbiw	r30, 0x02	; 2
 59c:	04 c0       	rjmp	.+8      	; 0x5a6 <strrev+0x18>
 59e:	7c 91       	ld	r23, X
 5a0:	6d 93       	st	X+, r22
 5a2:	70 83       	st	Z, r23
 5a4:	62 91       	ld	r22, -Z
 5a6:	ae 17       	cp	r26, r30
 5a8:	bf 07       	cpc	r27, r31
 5aa:	c8 f3       	brcs	.-14     	; 0x59e <strrev+0x10>
 5ac:	08 95       	ret

000005ae <_exit>:
 5ae:	f8 94       	cli

000005b0 <__stop_program>:
 5b0:	ff cf       	rjmp	.-2      	; 0x5b0 <__stop_program>
